{"ast":null,"code":"import { SET_SCREAMS, LIKE_SCREAM, UNLIKE_SCREAM, LOADING_DATA, DELETE_SCREAM, POST_SCREAM, SET_SCREAM, SUBMIT_COMMENT } from '../types';\nconst initialState = {\n  screams: [],\n  scream: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case LOADING_DATA:\n      return { ...state,\n        loading: true\n      };\n\n    case SET_SCREAMS:\n      return { ...state,\n        screams: action.payload,\n        loading: false\n      };\n\n    case SET_SCREAM:\n      return { ...state,\n        scream: action.payload\n      };\n\n    case LIKE_SCREAM:\n    case UNLIKE_SCREAM:\n      let index = state.screams.findIndex(scream => scream.screamId === action.payload.screamId);\n      state.screams[index] = action.payload;\n\n      if (state.scream.screamId === action.payload.screamId) {\n        state.scream = action.payload;\n      }\n\n      return { ...state\n      };\n\n    case DELETE_SCREAM:\n      let indexDel = state.screams.findIndex(scream => scream.screamId === action.payload);\n      state.screams.splice(indexDel, 1);\n      return { ...state\n      };\n\n    case POST_SCREAM:\n      return { ...state,\n        screams: [action.payload, ...state.screams]\n      };\n\n    case SUBMIT_COMMENT:\n      let indexComm = state.screams.findIndex(scream => scream.screamId === action.payload.screamId);\n      state.screams[indexComm].commentCount = action.payload.commentCount;\n      state.scream.commentCount = action.payload.commentCount;\n      return { ...state,\n        scream: { ...state.scream,\n          comments: [action.payload, ...state.scream.comments]\n        }\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/Darian/Desktop/thesisGIT/wedding-booking-client/src/redux/reducers/dataReducer.js"],"names":["SET_SCREAMS","LIKE_SCREAM","UNLIKE_SCREAM","LOADING_DATA","DELETE_SCREAM","POST_SCREAM","SET_SCREAM","SUBMIT_COMMENT","initialState","screams","scream","loading","state","action","type","payload","index","findIndex","screamId","indexDel","splice","indexComm","commentCount","comments"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,WAArB,EAAkCC,aAAlC,EAAiDC,YAAjD,EAA+DC,aAA/D,EAA8EC,WAA9E,EAA2FC,UAA3F,EAAuGC,cAAvG,QAA4H,UAA5H;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,EADQ;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,OAAO,EAAE;AAHQ,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAsC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKX,YAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHD,QAAAA,OAAO,EAAC;AAFL,OAAP;;AAIJ,SAAKX,WAAL;AACI,aAAM,EACF,GAAGY,KADD;AAEFH,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAFd;AAGFJ,QAAAA,OAAO,EAAE;AAHP,OAAN;;AAKJ,SAAKL,UAAL;AACI,aAAM,EACF,GAAGM,KADD;AAEFF,QAAAA,MAAM,EAAEG,MAAM,CAACE;AAFb,OAAN;;AAIJ,SAAKd,WAAL;AACA,SAAKC,aAAL;AACI,UAAIc,KAAK,GAAGJ,KAAK,CAACH,OAAN,CAAcQ,SAAd,CAAyBP,MAAD,IAAYA,MAAM,CAACQ,QAAP,KAAoBL,MAAM,CAACE,OAAP,CAAeG,QAAvE,CAAZ;AACAN,MAAAA,KAAK,CAACH,OAAN,CAAcO,KAAd,IAAuBH,MAAM,CAACE,OAA9B;;AACA,UAAGH,KAAK,CAACF,MAAN,CAAaQ,QAAb,KAA0BL,MAAM,CAACE,OAAP,CAAeG,QAA5C,EAAqD;AACjDN,QAAAA,KAAK,CAACF,MAAN,GAAeG,MAAM,CAACE,OAAtB;AACH;;AACD,aAAO,EACH,GAAGH;AADA,OAAP;;AAGJ,SAAKR,aAAL;AACI,UAAIe,QAAQ,GAAGP,KAAK,CAACH,OAAN,CAAcQ,SAAd,CAAyBP,MAAD,IAAYA,MAAM,CAACQ,QAAP,KAAoBL,MAAM,CAACE,OAA/D,CAAf;AACAH,MAAAA,KAAK,CAACH,OAAN,CAAcW,MAAd,CAAqBD,QAArB,EAA+B,CAA/B;AACA,aAAO,EACH,GAAGP;AADA,OAAP;;AAGJ,SAAKP,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,OAAO,EAAE,CACLI,MAAM,CAACE,OADF,EAEL,GAAGH,KAAK,CAACH,OAFJ;AAFN,OAAP;;AAOJ,SAAKF,cAAL;AACI,UAAIc,SAAS,GAAGT,KAAK,CAACH,OAAN,CAAcQ,SAAd,CAAyBP,MAAD,IAAYA,MAAM,CAACQ,QAAP,KAAoBL,MAAM,CAACE,OAAP,CAAeG,QAAvE,CAAhB;AACAN,MAAAA,KAAK,CAACH,OAAN,CAAcY,SAAd,EAAyBC,YAAzB,GAAwCT,MAAM,CAACE,OAAP,CAAeO,YAAvD;AACAV,MAAAA,KAAK,CAACF,MAAN,CAAaY,YAAb,GAA4BT,MAAM,CAACE,OAAP,CAAeO,YAA3C;AACA,aAAO,EACH,GAAGV,KADA;AAEHF,QAAAA,MAAM,EAAE,EACJ,GAAGE,KAAK,CAACF,MADL;AAEJa,UAAAA,QAAQ,EAAE,CACNV,MAAM,CAACE,OADD,EAEN,GAAGH,KAAK,CAACF,MAAN,CAAaa,QAFV;AAFN;AAFL,OAAP;;AAUJ;AACI,aAAOX,KAAP;AAxDR;AA0DH","sourcesContent":["import {SET_SCREAMS, LIKE_SCREAM, UNLIKE_SCREAM, LOADING_DATA, DELETE_SCREAM, POST_SCREAM, SET_SCREAM, SUBMIT_COMMENT} from '../types';\r\n\r\nconst initialState = {\r\n    screams: [],\r\n    scream: {},\r\n    loading: false\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case LOADING_DATA:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case SET_SCREAMS:\r\n            return{\r\n                ...state,\r\n                screams: action.payload,\r\n                loading: false\r\n            }\r\n        case SET_SCREAM:\r\n            return{\r\n                ...state,\r\n                scream: action.payload\r\n            }\r\n        case LIKE_SCREAM:\r\n        case UNLIKE_SCREAM:\r\n            let index = state.screams.findIndex((scream) => scream.screamId === action.payload.screamId);\r\n            state.screams[index] = action.payload;\r\n            if(state.scream.screamId === action.payload.screamId){\r\n                state.scream = action.payload;\r\n            }\r\n            return {\r\n                ...state\r\n            }\r\n        case DELETE_SCREAM:\r\n            let indexDel = state.screams.findIndex((scream) => scream.screamId === action.payload);\r\n            state.screams.splice(indexDel, 1);\r\n            return {\r\n                ...state,\r\n            }\r\n        case POST_SCREAM:\r\n            return {\r\n                ...state,\r\n                screams: [\r\n                    action.payload,\r\n                    ...state.screams\r\n                ]\r\n            }\r\n        case SUBMIT_COMMENT:\r\n            let indexComm = state.screams.findIndex((scream) => scream.screamId === action.payload.screamId);\r\n            state.screams[indexComm].commentCount = action.payload.commentCount;\r\n            state.scream.commentCount = action.payload.commentCount;\r\n            return {\r\n                ...state,\r\n                scream: {\r\n                    ...state.scream,\r\n                    comments: [\r\n                        action.payload,\r\n                        ...state.scream.comments\r\n                    ]\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}