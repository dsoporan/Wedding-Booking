{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darian\\\\Desktop\\\\Thesis\\\\wedding-booking-client\\\\src\\\\components\\\\ScreamDialog.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport MyButton from '../util/MyButton';\nimport dayjs from 'dayjs';\nimport { Link } from 'react-router-dom'; //MUI stuff\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography'; //Icons\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport UnfoldMore from '@material-ui/icons/UnfoldMore'; //redux\n\nimport { connect } from 'react-redux';\nimport { getScream } from '../redux/actions/dataActions';\nconst styles = {\n  invisibleSeparator: {\n    border: 'none',\n    margin: 4\n  },\n  profileImage: {\n    maxWidth: 200,\n    height: 200,\n    borderRadius: '50%',\n    objectFit: 'cover'\n  },\n  DialogContent: {\n    padding: 20\n  }\n};\n\nclass ScreamDialog extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n      this.props.getScream(this.props.screamId);\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      scream: {\n        screamId,\n        body,\n        createdAt,\n        likeCount,\n        commentCount,\n        userImage,\n        username\n      },\n      UI: {\n        loading\n      }\n    } = this.props;\n    const dialogMarkup = loading ? React.createElement(CircularProgress, {\n      size: 150,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }) : React.createElement(Grid, {\n      container: true,\n      spacing: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      sm: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: userImage,\n      alt: \"Profile\",\n      className: classes.profileImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      sm: 7,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: Link,\n      color: \"primary\",\n      variant: \"h5\",\n      to: `/users/${username}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, username), React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, dayjs(createdAt).format('h:mm a, MMMM DD YYYY')), React.createElement(\"hr\", {\n      className: classes.invisibleSeparator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"body1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, body)));\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      onClick: this.handleOpen,\n      tip: \"Expand Scream\",\n      tipClassName: classes.expandButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(UnfoldMore, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(MyButton, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      tipClassName: classes.closeButton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), React.createElement(DialogContent, {\n      className: classes.DialogContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, dialogMarkup)));\n  }\n\n}\n\nScreamDialog.propTypes = {\n  getScream: PropTypes.func.isRequired,\n  screamId: PropTypes.string.isRequired,\n  username: PropTypes.string.isRequired,\n  scream: PropTypes.object.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  scream: state.data.scream,\n  UI: state.UI\n});\n\nconst mapActionsToProps = {\n  getScream\n};\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(ScreamDialog));","map":{"version":3,"sources":["C:/Users/Darian/Desktop/Thesis/wedding-booking-client/src/components/ScreamDialog.js"],"names":["React","Component","Fragment","PropTypes","withStyles","MyButton","dayjs","Link","Dialog","DialogContent","DialogTitle","CircularProgress","Grid","Typography","CloseIcon","UnfoldMore","connect","getScream","styles","invisibleSeparator","border","margin","profileImage","maxWidth","height","borderRadius","objectFit","padding","ScreamDialog","state","open","handleOpen","setState","props","screamId","handleClose","render","classes","scream","body","createdAt","likeCount","commentCount","userImage","username","UI","loading","dialogMarkup","format","expandButton","closeButton","propTypes","func","isRequired","string","object","mapStateToProps","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MyButton from '../util/MyButton';\r\nimport dayjs from 'dayjs';\r\nimport {Link} from 'react-router-dom';\r\n\r\n//MUI stuff\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n//Icons\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport UnfoldMore from '@material-ui/icons/UnfoldMore';\r\n\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {getScream} from '../redux/actions/dataActions';\r\n\r\nconst styles = {\r\n    invisibleSeparator: {\r\n        border: 'none',\r\n        margin: 4\r\n    },\r\n    profileImage: {\r\n        maxWidth: 200,\r\n        height: 200,\r\n        borderRadius: '50%',\r\n        objectFit: 'cover'\r\n    },\r\n    DialogContent: {\r\n        padding: 20\r\n    }\r\n}\r\n\r\nclass ScreamDialog extends Component{\r\n    state = {\r\n        open: false\r\n    };\r\n\r\n    handleOpen = () => {\r\n        this.setState({open:true});\r\n        this.props.getScream(this.props.screamId);\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({open:false});\r\n    }\r\n\r\n    render(){\r\n        const {classes, scream : {screamId, body, createdAt, likeCount, commentCount, userImage, username},\r\n         UI: {loading}} = this.props;\r\n\r\n         const dialogMarkup = loading ? (\r\n             <CircularProgress size={150}/>\r\n         ) : (\r\n             <Grid container spacing={4}>\r\n                 <Grid item sm={5}>\r\n                     <img src={userImage} alt=\"Profile\" className={classes.profileImage}/>\r\n                 </Grid>\r\n                 <Grid item sm={7}>\r\n                    <Typography component={Link} color=\"primary\" variant=\"h5\" to={`/users/${username}`}>\r\n                        {username}\r\n                    </Typography>\r\n                    <hr className={classes.invisibleSeparator}/>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        {dayjs(createdAt).format('h:mm a, MMMM DD YYYY')}\r\n                    </Typography>\r\n                    <hr className={classes.invisibleSeparator}/>\r\n                    <Typography variant=\"body1\">\r\n                        {body}\r\n                    </Typography>\r\n                 </Grid>\r\n             </Grid>\r\n         )\r\n\r\n         return (\r\n             <Fragment>\r\n                 <MyButton onClick={this.handleOpen} tip=\"Expand Scream\" tipClassName={classes.expandButton}>\r\n                     <UnfoldMore color=\"primary\"/>\r\n                 </MyButton>\r\n                 <Dialog open={this.state.open} onClose={this.handleClose} fullWidth maxWidth=\"sm\">\r\n                    <MyButton tip=\"Close\" onClick={this.handleClose} tipClassName={classes.closeButton}>\r\n                        <CloseIcon/>\r\n                    </MyButton>\r\n                    <DialogContent className={classes.DialogContent}>\r\n                        {dialogMarkup}\r\n                    </DialogContent>\r\n                 </Dialog>\r\n             </Fragment>\r\n         )\r\n    }\r\n}\r\n\r\nScreamDialog.propTypes = {\r\n    getScream: PropTypes.func.isRequired,\r\n    screamId: PropTypes.string.isRequired,\r\n    username: PropTypes.string.isRequired,\r\n    scream: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    scream: state.data.scream,\r\n    UI: state.UI\r\n});\r\n\r\nconst mapActionsToProps = {\r\n    getScream\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(withStyles(styles)(ScreamDialog));"]},"metadata":{},"sourceType":"module"}