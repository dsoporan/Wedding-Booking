{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darian\\\\Desktop\\\\nou\\\\thesis\\\\wedding-booking-client\\\\src\\\\components\\\\scream\\\\CommentForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles'; //MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField'; //redux\n\nimport { connect } from 'react-redux';\nimport { submitComment, getScreams } from '../../redux/actions/dataActions';\nconst styles = {\n  button: {\n    marginTop: 10,\n    marginBottom: 5\n  }\n};\nexport class CommentForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      body: '',\n      errors: {},\n      submitted: false\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.submitComment(this.props.screamId, {\n        body: this.state.body\n      }); // this.props.getScreams();\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      authenticated,\n      UI: {\n        loading\n      }\n    } = this.props;\n    const errors = this.state.errors;\n    const commentFormMarkup = authenticated ? React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"Comment on post\",\n      error: errors.comment ? true : false,\n      helperText: errors.comment,\n      value: this.state.body,\n      onChange: this.handleChange,\n      fullWidth: true,\n      className: classes.textField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Submit\", loading && React.createElement(CircularProgress, {\n      size: 30,\n      className: classes.progressSpinner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }))), React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })) : null;\n    return commentFormMarkup;\n  }\n\n}\nCommentForm.propTypes = {\n  submitComment: PropTypes.func.isRequired,\n  getScreams: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  screamId: PropTypes.string.isRequired,\n  authenticated: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI,\n  authenticated: state.user.authenticated\n});\n\nexport default connect(mapStateToProps, {\n  submitComment,\n  getScreams\n})(withStyles(styles)(CommentForm));","map":{"version":3,"sources":["C:/Users/Darian/Desktop/nou/thesis/wedding-booking-client/src/components/scream/CommentForm.js"],"names":["React","Component","PropTypes","withStyles","Button","Grid","TextField","connect","submitComment","getScreams","styles","button","marginTop","marginBottom","CommentForm","state","body","errors","submitted","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","screamId","componentWillReceiveProps","nextProps","UI","loading","render","classes","authenticated","commentFormMarkup","textAlign","comment","textField","progressSpinner","visibleSeparator","propTypes","func","isRequired","object","string","bool","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n\r\n\r\n//MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {submitComment, getScreams} from '../../redux/actions/dataActions'; \r\n\r\nconst styles = {\r\n    button: {\r\n        marginTop: 10,\r\n        marginBottom: 5\r\n    }\r\n}\r\n\r\nexport class CommentForm extends Component {\r\n    state = {\r\n        body: '',\r\n        errors: {},\r\n        submitted: false\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.UI.errors){\r\n            this.setState({errors: nextProps.UI.errors});\r\n        }\r\n        if(!nextProps.UI.errors && !nextProps.UI.loading){\r\n            this.setState({body: ''});\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({[event.target.name] : event.target.value});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submitComment(this.props.screamId, {body: this.state.body});\r\n        // this.props.getScreams();\r\n    }\r\n\r\n    render() {\r\n        const {classes, authenticated, UI: {loading}} = this.props;\r\n        const errors = this.state.errors;\r\n\r\n        const commentFormMarkup = authenticated ? (\r\n            <Grid item sm={12} style={{textAlign: 'center'}}>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <TextField name=\"body\" type=\"text\" label=\"Comment on post\" error={errors.comment ? true : false}\r\n                     helperText={errors.comment} value={this.state.body} onChange={this.handleChange} fullWidth className={classes.textField}/>\r\n\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                        Submit\r\n                        {loading && (\r\n                                 <CircularProgress size={30} className={classes.progressSpinner}/>\r\n                             )}\r\n                    </Button>\r\n                </form>\r\n                <hr className={classes.visibleSeparator}/>\r\n            </Grid>\r\n        ) : null\r\n        return commentFormMarkup;\r\n    }\r\n}\r\n\r\nCommentForm.propTypes = {\r\n    submitComment : PropTypes.func.isRequired,\r\n    getScreams : PropTypes.func.isRequired,\r\n    UI: PropTypes.object.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    screamId: PropTypes.string.isRequired,\r\n    authenticated: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    UI: state.UI,\r\n    authenticated: state.user.authenticated\r\n})\r\n\r\nexport default connect(mapStateToProps, {submitComment, getScreams})(withStyles(styles)(CommentForm));\r\n"]},"metadata":{},"sourceType":"module"}