{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darian\\\\Desktop\\\\thesisGIT\\\\wedding-booking-client\\\\src\\\\components\\\\layout\\\\Notifications.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport PropTypes from 'prop-types'; //Mui stuff\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge'; //Icons\n\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Favorite from '@material-ui/icons/Favorite';\nimport ChatIcon from '@material-ui/icons/Chat'; //REdux\n\nimport { connect } from 'react-redux';\nimport { markNotificationsRead } from '../../redux/actions/userActions';\n\nclass Notifications extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      anchorEl: null\n    };\n\n    this.handleOpen = event => {\n      this.setState({\n        anchorEl: event.target\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        anchorEl: null\n      });\n    };\n\n    this.onMenuOpened = () => {\n      let unreadNotificationsIds = this.props.notifications.filter(notif => !notif.read).map(notif => notif.notificationId);\n      this.props.markNotificationsRead(unreadNotificationsIds);\n    };\n  }\n\n  render() {\n    const notifications = this.props.notifications;\n    const anchorEl = this.state.anchorEl;\n    dayjs.extend(relativeTime);\n    let notificationIcon;\n\n    if (notifications && notifications.length > 0) {\n      notifications.filter(notif => notif.read === false).length > 0 ? notificationIcon = React.createElement(Badge, {\n        badgeContent: notifications.filter(notif => notif.read === false).length,\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(NotificationsIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })) : notificationIcon = React.createElement(NotificationsIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      });\n    } else {\n      notificationIcon = React.createElement(NotificationsIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      });\n    }\n\n    let notificationsMarkup = notifications && notificationIcon.length > 0 ? notifications.map(notif => {\n      const verb = notif.type === 'like' ? 'liked' : 'commened on';\n      const time = dayjs(notif.createdAt).fromNow();\n      const iconColor = notif.read ? 'primary' : 'secondary';\n      const icon = notif.type === 'like' ? React.createElement(FavoriteIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }) : React.createElement(ChatIcon, {\n        color: iconColor,\n        style: {\n          marginRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      });\n      return React.createElement(MenuItem, {\n        key: notif.createdAt,\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, icon, React.createElement(Typography, {\n        component: Link,\n        color: \"default\",\n        variant: \"body1\",\n        to: `/users/${notif.recipient}/scream/${notif.screamId}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, notif.sender, \" \", verb, \" your scream \", time));\n    }) : React.createElement(MenuItem, {\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"You have no notifications yet!\");\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      placement: \"top\",\n      title: \"Notifications\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(IconButton, {\n      \"aria-owns\": anchorEl ? 'simple-menu' : undefined,\n      \"aria-haspopup\": \"true\",\n      onClick: this.handleOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, notificationIcon)), React.createElement(Menu, {\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: this.handleClose,\n      onEntered: this.onMenuOpened,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, notificationsMarkup));\n  }\n\n}\n\nNotifications.propTypes = {\n  markNotificationsRead: PropTypes.func.isRequired,\n  Notifications: PropTypes.object.isRequired\n};\nconst mapStateToProps = {\n  notifications: state.user.notifications\n};\nexport default connect(mapStateToProps, {\n  markNotificationsRead\n})(Notifications);","map":{"version":3,"sources":["C:/Users/Darian/Desktop/thesisGIT/wedding-booking-client/src/components/layout/Notifications.js"],"names":["React","Component","Fragment","Link","dayjs","relativeTime","PropTypes","Menu","MenuItem","IconButton","Typography","Badge","NotificationsIcon","Favorite","ChatIcon","connect","markNotificationsRead","Notifications","state","anchorEl","handleOpen","event","setState","target","handleClose","onMenuOpened","unreadNotificationsIds","props","notifications","filter","notif","read","map","notificationId","render","extend","notificationIcon","length","notificationsMarkup","verb","type","time","createdAt","fromNow","iconColor","icon","marginRight","recipient","screamId","sender","undefined","Boolean","propTypes","func","isRequired","object","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime'\r\nimport PropTypes from 'prop-types';\r\n\r\n//Mui stuff\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\n//Icons\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\n\r\n//REdux\r\nimport {connect} from 'react-redux';\r\nimport {markNotificationsRead} from '../../redux/actions/userActions';\r\n\r\nclass Notifications extends Component {\r\n    state = {\r\n        anchorEl: null\r\n    }\r\n\r\n    handleOpen = (event) => {\r\n        this.setState({anchorEl : event.target});\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({anchorEl: null})\r\n    }\r\n\r\n    onMenuOpened = () => {\r\n        let unreadNotificationsIds = this.props.notifications\r\n        .filter(notif => !notif.read)\r\n        .map(notif => notif.notificationId);\r\n\r\n        this.props.markNotificationsRead(unreadNotificationsIds);\r\n\r\n    }\r\n\r\n    render(){\r\n        const notifications = this.props.notifications;\r\n        const anchorEl = this.state.anchorEl;\r\n\r\n        dayjs.extend(relativeTime);\r\n        \r\n        let notificationIcon;\r\n        if(notifications && notifications.length > 0){\r\n            notifications.filter(notif => notif.read === false).length > 0 ? (\r\n                notificationIcon = (\r\n                    <Badge badgeContent={notifications.filter(notif => notif.read === false).length} color=\"secondary\">\r\n                        <NotificationsIcon/>\r\n                    </Badge>\r\n                )\r\n            ) : (\r\n                notificationIcon = <NotificationsIcon/>\r\n            )\r\n        }\r\n        else {\r\n            notificationIcon = <NotificationsIcon/>\r\n        }\r\n\r\n        let notificationsMarkup = notifications && notificationIcon.length > 0 ? (\r\n            notifications.map(notif => {\r\n                const verb = notif.type === 'like' ? 'liked' : 'commened on';\r\n                const time = dayjs(notif.createdAt).fromNow();\r\n                const  iconColor = notif.read ? 'primary' : 'secondary';\r\n                const icon = notif.type === 'like' ? (\r\n                    <FavoriteIcon color={iconColor} style={{marginRight: 10}} />\r\n                ) : (\r\n                    <ChatIcon color={iconColor} style={{marginRight: 10}}/>\r\n                )\r\n\r\n                return (\r\n                    <MenuItem key={notif.createdAt} onClick={this.handleClose}>\r\n                        {icon}\r\n                        <Typography component={Link} color=\"default\" variant=\"body1\" to={`/users/${notif.recipient}/scream/${notif.screamId}`}>\r\n                            {notif.sender} {verb} your scream {time}\r\n                        </Typography>\r\n                    </MenuItem>\r\n                )\r\n            })\r\n        ) : (\r\n            <MenuItem onClick={this.handleClose}>\r\n                You have no notifications yet!\r\n            </MenuItem>\r\n        )\r\n\r\n        return (\r\n            <Fragment>\r\n                <Tooltip placement=\"top\" title=\"Notifications\">\r\n                    <IconButton aria-owns={anchorEl ? 'simple-menu' : undefined} aria-haspopup=\"true\" onClick={this.handleOpen}>\r\n                        {notificationIcon}\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={this.handleClose} onEntered={this.onMenuOpened}>\r\n                    {notificationsMarkup}\r\n                </Menu>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nNotifications.propTypes = {\r\n    markNotificationsRead: PropTypes.func.isRequired,\r\n    Notifications: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps =  ({\r\n    notifications: state.user.notifications\r\n})\r\n\r\nexport default connect(mapStateToProps, {markNotificationsRead})(Notifications);"]},"metadata":{},"sourceType":"module"}