{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darian\\\\Desktop\\\\nou\\\\thesis\\\\wedding-booking-client\\\\src\\\\components\\\\scream\\\\CommentForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles'; //MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField'; //redux\n\nimport { connect } from 'react-redux';\nimport { submitComment, getScreams } from '../../redux/actions/dataActions';\nconst styles = {\n  button: {\n    marginTop: 10,\n    marginBottom: 5\n  }\n};\nexport class CommentForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      body: '',\n      errors: {}\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.submitComment(this.props.screamId, {\n        body: this.state.body\n      });\n      this.props.getScreams();\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: ''\n      });\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      authenticated\n    } = this.props;\n    const errors = this.state.errors;\n    const commentFormMarkup = authenticated ? React.createElement(Grid, {\n      item: true,\n      sm: 12,\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"Comment on post\",\n      error: errors.comment ? true : false,\n      helperText: errors.comment,\n      value: this.state.body,\n      onChange: this.handleChange,\n      fullWidth: true,\n      className: classes.textField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"hr\", {\n      className: classes.visibleSeparator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })) : null;\n    return commentFormMarkup;\n  }\n\n}\nCommentForm.propTypes = {\n  submitComment: PropTypes.func.isRequired,\n  getScreams: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  screamId: PropTypes.string.isRequired,\n  authenticated: PropTypes.bool.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI,\n  authenticated: state.user.authenticated\n});\n\nexport default connect(mapStateToProps, {\n  submitComment,\n  getScreams\n})(withStyles(styles)(CommentForm));","map":{"version":3,"sources":["C:/Users/Darian/Desktop/nou/thesis/wedding-booking-client/src/components/scream/CommentForm.js"],"names":["React","Component","PropTypes","withStyles","Button","Grid","TextField","connect","submitComment","getScreams","styles","button","marginTop","marginBottom","CommentForm","state","body","errors","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","screamId","componentWillReceiveProps","nextProps","UI","loading","render","classes","authenticated","commentFormMarkup","textAlign","comment","textField","visibleSeparator","propTypes","func","isRequired","object","string","bool","mapStateToProps","user"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n\r\n\r\n//MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//redux\r\nimport {connect} from 'react-redux';\r\nimport {submitComment, getScreams} from '../../redux/actions/dataActions'; \r\n\r\nconst styles = {\r\n    button: {\r\n        marginTop: 10,\r\n        marginBottom: 5\r\n    }\r\n}\r\n\r\nexport class CommentForm extends Component {\r\n    state = {\r\n        body: '',\r\n        errors: {}\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.UI.errors){\r\n            this.setState({errors: nextProps.UI.errors});\r\n        }\r\n        if(!nextProps.UI.errors && !nextProps.UI.loading){\r\n            this.setState({body: ''});\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({[event.target.name] : event.target.value});\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submitComment(this.props.screamId, {body: this.state.body});\r\n        this.props.getScreams();\r\n    }\r\n\r\n    render() {\r\n        const {classes, authenticated} = this.props;\r\n        const errors = this.state.errors;\r\n\r\n        const commentFormMarkup = authenticated ? (\r\n            <Grid item sm={12} style={{textAlign: 'center'}}>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <TextField name=\"body\" type=\"text\" label=\"Comment on post\" error={errors.comment ? true : false}\r\n                     helperText={errors.comment} value={this.state.body} onChange={this.handleChange} fullWidth className={classes.textField}/>\r\n\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" className={classes.button}>\r\n                        Submit\r\n                    </Button>\r\n                </form>\r\n                <hr className={classes.visibleSeparator}/>\r\n            </Grid>\r\n        ) : null\r\n        return commentFormMarkup;\r\n    }\r\n}\r\n\r\nCommentForm.propTypes = {\r\n    submitComment : PropTypes.func.isRequired,\r\n    getScreams : PropTypes.func.isRequired,\r\n    UI: PropTypes.object.isRequired,\r\n    classes: PropTypes.object.isRequired,\r\n    screamId: PropTypes.string.isRequired,\r\n    authenticated: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    UI: state.UI,\r\n    authenticated: state.user.authenticated\r\n})\r\n\r\nexport default connect(mapStateToProps, {submitComment, getScreams})(withStyles(styles)(CommentForm));\r\n"]},"metadata":{},"sourceType":"module"}